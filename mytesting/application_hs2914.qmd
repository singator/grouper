---
title: "HS2914 tutorial allocation"
format: 
  html:
    embed-resources: true
---

```{r}
library(grouper)
library(ompr)
library(ompr.roi)
library(ROI.plugin.gurobi)
```

Each of the code chunks below corresponds to data from one of the five tutorial
groups that needed to split into discussion groups. Each tutorial group needed 
to contain 5 discussion groups.

```{r}
df1 <- readRDS("data009-composition.rds")
df_list <- extract_student_info(df1, "diversity",
                                demographic_cols = 2, skills = NULL, 
                                self_formed_groups = 1)
yaml_list <- extract_params_yaml("mdl01_input009.yml", "diversity")

# Purely demographic-diversity based.
m1 <- prepare_model(df_list, yaml_list, "diversity", w1=1.0)
result <- solve_model(m1, with_ROI(solver="gurobi"))
assigned_groups <- assign_groups(result, "diversity", df1, yaml_list, "student_id")
```

```{r}
library(tidyverse)
assigned_groups %>% ggplot() +
  geom_bar(aes(x=coded_major, fill = coded_major)) + facet_wrap(~assigned_grouping)

assigned_groups %>% ggplot() +
  geom_bar(aes(x=coded_major, fill = coded_major)) + facet_wrap(~topic)
```

The comparison below shows that, compared to the manual routine, the `grouper`
routines are able to balance the numbers of dsds (data science and statistics
majors) with the non-dsds majors better.

```{r}
assigned_groups <- rename(assigned_groups, 
                          "grouper_assigned"="topic",
                          "manual_assigned" = "assigned_grouping")
assigned_groups %>% 
  select(grouper_assigned, group, coded_major, manual_assigned) %>% 
  pivot_longer(cols=c("grouper_assigned", "manual_assigned"), names_to="assign_mtd",
               values_to="assign_value") %>% 
  ggplot() + 
  geom_bar(aes(x=coded_major, fill=coded_major), show.legend = FALSE) + 
  facet_wrap(~assign_mtd + assign_value, nrow=2) +
  labs(title="Comparison between grouper assignment and manual assignment",
       subtitle="Diversity-based assignment")
```

Table for manual assigned:

```{r}
tmp_two_tbls <- assigned_groups %>% 
  select(grouper_assigned, group, coded_major, manual_assigned) %>% 
  pivot_longer(cols=c("grouper_assigned", "manual_assigned"), names_to="assign_mtd",
               values_to="assign_value")  %>% 
  group_by(coded_major, assign_mtd, assign_value) %>% count() %>% 
  ungroup()

manual_tbl <- filter(tmp_two_tbls, assign_mtd == "manual_assigned") %>% 
  pivot_wider(names_from="coded_major", values_from="n")

grouper_tbl <- filter(tmp_two_tbls, assign_mtd == "grouper_assigned") %>% 
  pivot_wider(names_from="coded_major", values_from="n")
```

```{r}
left_join(manual_tbl, grouper_tbl, by='assign_value')
```


Another example, for data012:

```{r}
df1 <- readRDS("data012-composition.rds")
df_list <- extract_student_info(df1, "diversity",
                                demographic_cols = 2, skills = NULL, 
                                self_formed_groups = 1)
yaml_list <- extract_params_yaml("mdl01_input012.yml", "diversity")

# Purely demographic-diversity based.
m1 <- prepare_model(df_list, yaml_list, "diversity", w1=1.0)
result <- solve_model(m1, with_ROI(solver="gurobi"))
assigned_groups <- assign_groups(result, "diversity", df1, yaml_list, "student_id")
```

Similar code will work for data010 and data011 (resp. input011.yml and input012.yml)
